apiVersion: v1
kind: Namespace
metadata:
  name: logging
  labels:
    argocd.argoproj.io/managed-by: argocd # Optional: label it as managed by ArgoCD
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ns-logging # App name in ArgoCD
  namespace: argocd # ArgoCD's own namespace
  finalizers:
    - resources-finalizer.argocd.argoproj.io # Ensures resources are deleted when app is deleted
spec:
  project: default
  source:
    repoURL: 'https://github.com/jennystar7703/monitoring-stack-k8.git' # YOUR REPO URL
    targetRevision: HEAD # Or 'main', or a specific commit/tag
    path: '.' # Path within the repo, for a single manifest like this, use the root or specific path
    # This specific app uses a kustomization or plain manifest from the repo root
    # To apply just this namespace file, you might actually use a different approach
    # or bundle it. For simplicity here, we are creating an app JUST for the namespace.
    # A better way is to make sure helm charts create their own namespaces if not exists
    # or use an "app-of-apps" to create namespaces first.
    # For now, let's assume you apply this manifest manually once, or use a simple app for it.

    # A more direct way to create the namespace using an ArgoCD app with a manifest:
    # (This is a simplified way to handle a single manifest if it's not part of a Helm chart)
    # You'd have this file (logging-namespace.yaml) in your repo, say at `argocd-apps/namespaces/logging-namespace.yaml`
    # Then path would be: `argocd-apps/namespaces` and it would apply all YAMLs in there.
    # For this example, we'll just have the Helm apps create their namespaces if `createNamespace: true` is supported by chart
    # OR, apply the namespace manifest below MANUALLY once, or via GitHub Actions later.

    # Let's simplify and assume Helm charts will handle namespace creation or you create it manually once.
    # So, you could skip the ArgoCD app for the namespace itself if your charts support `createNamespace: true`
    # or if you create it manually one time: `kubectl apply -f argocd-apps/logging-namespace.yaml`
    # For this example, let's create files for the actual applications.