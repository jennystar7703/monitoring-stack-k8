# my-values/kibana-values.yaml

service:
  type: NodePort
  port: 5601

resources:
  requests:
    cpu: "200m"
    memory: "200Mi"
  limits:
    cpu: "1000m"
    memory: "2Gi"

# Explicitly set the environment variables Kibana and its hooks will use
extraEnvs:
  - name: ELASTICSEARCH_HOSTS
    value: "https://elasticsearch-master.logging:9200" # CRITICAL: Ensure this is a STRING
  #- name: ELASTICSEARCH_USERNAME
  #  value: "elastic"
  #- name: ELASTICSEARCH_PASSWORD
  #  valueFrom:
  #    secretKeyRef:
  #      name: elasticsearch-master-credentials # The K8s secret name
  #      key: password                         # The key within that secret
  #- name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
  #  value: "/usr/share/kibana/config/certs/ca.crt"
  - name: ELASTICSEARCH_SERVICEACCOUNTTOKEN # VERIFY THIS ENV VAR NAME FROM YOUR CHART'S DOCS/TEMPLATES
    valueFrom:
      secretKeyRef:
        name: kibana-kibana-es-token # The secret created by the pre-install job
        key: token # The key in the secret (usually 'token' or 'apikey')
  - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
    value: "/usr/share/kibana/config/certs/ca.crt"
  # Add other necessary env vars if Kibana needs them e.g. ELASTICSEARCH_SSL_VERIFICATIONMODE: "certificate"

# Volume mounts for the Elasticsearch CA Certificate
extraVolumes:
  - name: kibana-es-ca-certs-volume # Ensure this name is unique if your chart creates other volumes
    secret:
      secretName: elasticsearch-master-certs # The K8s secret containing your ES CA cert (with a key 'ca.crt')

extraVolumeMounts:
  - name: kibana-es-ca-certs-volume # Must match the name in extraVolumes above
    mountPath: /usr/share/kibana/config/certs # Directory where ca.crt will be available
    readOnly: true

# If your chart has specific top-level keys for SSL that work, you can use them too,
# but env vars are often a reliable override.
# For example:
# elasticsearchSSL:
#   certificateAuthorities: ["/usr/share/kibana/config/certs/ca.crt"]
#   verificationMode: "certificate"